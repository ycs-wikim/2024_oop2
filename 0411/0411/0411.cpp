// 0411.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    int ak;
    int& ra = ak;       // 참조 변수 선언
    //int& re = 3;      // 상수로 변수를 초기화할 수 없다!
    //int& re;          // 선언 시 즉시 변수를 할당해야 함

    ra = 3;
    printf("RA - A: %d %d\n", ra, ak);

    // 포인터는 자료형에 영향을 매우 많이 받는다!
    //  ==> 선언 시 자료형의 크기로 메모리를 접근!
    int a = 8;
    //char* cp = &a;  // 허용되지 않음! 자료형을 강제!
    char* cp = (char*) & a;

    char c = 65;
    //int* cp = (int*) & c;   // 의도하지 않은 동작 가능성이 높다

    //void k;       // void 형식의 자료형은 선언 불가
                    // 메모리 접근 크기를 알 수 없음.

#ifdef EX_1
    /// 포인터의 연산자
    /// 1. *    1) 선언 - 바로 뒤 변수는 주소를 받는 변수
    ///             중국집 주소
    ///         2) 사용 - 주소 위치의 값 접근
    ///             자장면
    /// 2. &    - 바로 뒤 변수의 주소 값을 가져온다.
    int a = 7;      // 일반 변수 선언 - 값만 가짐.
    //int *p = a;     // 포인터(주소) = 값
    int* p = &a;    // 포인터(주소) = 뒤의 a 변수의 주소

//    printf("%d %d %d\n", a, &a, *a);    // *a 허용 X
    printf("%d %p\n", a, &a);
    *p = 999;       // *p == a
    /// *붙은 포인터는 주소의 원래 변수와 동일
    printf("%p %p %d\n", p, &p, *p);
    printf("A: %d\n", a);

    /// 다중 포인터
    int k = 9;          // 일반 변수
    int* p1 = &k;       // * = *(&)
    int** p2 = &p1;     // ** = * *(&)
    int*** p3 = &p2;    // *** = ** *(&)
    int**** p4 = &p3;   // **** = *** *(&)
    int***** p5 = &p4;  // ***** = **** *(&)

    printf("K   : %d %p\n", k, &k);
    printf("p1  : %d %p %p\n", *p1, p1, &p1);
    printf("p2  : %d %p %p %p\n", **p2, p2, &p2, *p2 );
    printf("p3  : %d %p %p %p %p\n", ***p3, p3, &p3, *p3, **p3);
    printf("p4  : %d %p %p %p %p %p\n", ****p4, p4, &p4, *p4, **p4, ***p4);
    //printf("p5  : %d %p %p\n", *p1, p1, &p1);
#endif
}
