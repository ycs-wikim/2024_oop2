// 0404.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
using namespace std;


int main()
{
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < i + 1; j++)
        {
            printf("*");
        }
        printf("\n");
    }

    for (int i = 4; i < 9; i++)
    {
        for (int j = 1; j < 10; j++)
        {
            printf("%d * %d = %d\n", i, j, i * j);
        }
        printf("\n");
    }


    /// C++에서는 어디서나 변수 선언이 가능!
    ///     ==> 절대 어디서나 변수를 선언하지 말것!!!

    /// for( ) { 반복문장; 반복문장; }
    /// for( 초기식(1); 조건식(2); 증감/제어(3) ) { 반복할 내용들;(4) }
    /// 1 --> 2 --> 4 --> 3 --> 2 --> 4 --> 3 --> ...
    /// for : 정확한 횟수만큼 반복할 때 가장 유효함.
    /// 
    /// 초기식(1)
    /// while( 조건식(2) ) { 반복내용(4); 증감/제어(3); }
    /// 1 --> 2 --> 4 --> 3 --> 2 --> 4 --> 3 --> ...
    /// 
    /// 초기식(1)
    /// do { 반복내용(4); 증감/제어(3) } while( 조건식(2) )
    /// 1 --> 4 --> 3 --> 2 --> 4 --> 3 --> 2 --> ...

    /// 무한반복
    /// 1. for( ; ; ) : 초기, 조건, 증감/제어 모두 생략 가능
    /// 2. while( 1 )
    /// 3. do ~ while( 1 ) ;

    int a = 1;
    int b = 1;
    int c = 0;
    int d = 1;
    int e = 1;
    
    do      /// 예약어 : 반복문의 시작 위치를 알려주는 라벨 도는 주소
    {
        if (a != 1)
            break;
        if (b != 1)
            break;
        if (c != 1)
        {
            printf("C조건이 만족하지 않는군.\n");
            break;
        }
        if (d != 1)
            break;
        if (e != 1)
            break;
        // 도착 : 조건을 모두 만족했다.
        printf("옛다 전설 퀘스트\n");
        return 0;

    } while (0);
    /// 조건을 만족하지 않는 경우에 도착 위치
    printf("너는 아직 준비가 안됐다.\n");


    /// C언어의 문장 구조
    /// 예약어( ) 한문장; ==> 예약어의 관리를 받는다.
    /// if( 조건 ) { 한문장; 한문장; } else { 한문장; 한문장; }
    

    int x = 3;
    /// switch는 if에 비해 속도가 느림. 버그 가능성이 높기 때문에 사용 금지!!!!!
    switch (x)      // switch(변수) {   ==   예약어( ) 한문장
    {
    /// case 상수:    ==> C언어에서 라벨 또는 주소
    case 1:     /// if(x == 1)
        x = x + 1;
        break;
    case 2:     /// if(x == 2)
        x = x + 2;
        break;
    case 3:     /// if(x == 3)
        x = x + 3;
        break;  /// switch에서 사용할 경우, 더 이상 진행하지 않고, switch의 }로 이동
    case 4:     /// if(x == 4)
        x = x + 4;
        break;
    default:    /// x 값에 해당하는 case 값이 존재하지 않는 경우. == else
                /// default에서 하는 일이 없어도 반드시 default를 입력
        break;
    }


    std::cout << "Hello World!  " << x << endl;
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
//  ==> 실제 프로그램이 동작하는 환경에서 결과를 확인 가능
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴
//  ==> 실제 동작 환경과 관계 없이 프로그램을 Vs가 관리하는 상태
//  ==> ~.exe 생성 시, 중간에 디버그 코드가 별도로 삽입